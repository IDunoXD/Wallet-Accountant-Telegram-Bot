import telebot
from dispatcher import dp
import config
import re
from bot import BotDB
from telebot import types

import logging

from aiogram import Bot, types
from utils import TestStates
from messages import MESSAGES

logging.basicConfig(format=u'%(filename)+13s [ LINE:%(lineno)-4s] %(levelname)-8s [%(asctime)s] %(message)s',
                    level=logging.DEBUG)

bot = Bot(token=config.BOT_TOKEN)

StartKeybord = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
item1 = types.KeyboardButton("‚ûï–ü—Ä–∏–±—É—Ç–æ–∫")
item2 = types.KeyboardButton("‚ûñ–í–∏—Ç—Ä–∞—Ç–∏")
item3 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å‚ùå")
item4 = types.KeyboardButton("üïò–Ü—Å—Ç–æ—Ä—ñ—è")
StartKeybord.add(item1,item2).add(item4).add(item3)

within_als = {
    "day": ('today', 'day', '—Å—å–æ–≥–æ–¥–Ω—ñ', '–¥–µ–Ω—å'),
    "week": ('week','–Ω–µ–¥—ñ–ª—è'),
    "month": ('month', '–º—ñ—Å—è—Ü—å'),
    "year": ('year', '—Ä—ñ–∫'),
    "all": ('all','–≤–µ—Å—å —á–∞—Å')
}

record_types=["–ø—Ä–∏–±—É—Ç–æ–∫","üè†–¥—ñ–º","üí≤–ø–æ–∫—É–ø–∫–∏","üçó–ø—Ä–æ–¥—É–∫—Ç–∏","üòú—Ä–æ–∑–≤–∞–≥–∏","‚úàÔ∏è—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"]

async def history(message: types.Message,within):
    records = BotDB.get_records(message.from_user.id, within)
    if(len(records)):
        answer = f"üïò –Ü—Å—Ç–æ—Ä—ñ—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑–∞ {within_als[within][-1]}\n\n"
        sum=0
        for r in records:
            answer += "<b>" + ("‚ûñ –í–∏—Ç—Ä–∞—Ç–∏" if not r[2] else "‚ûï –ü—Ä–∏–±—É—Ç–æ–∫") + "</b>"
            answer += f" –Ω–∞ '{record_types[r[3]]}' " if not r[2] else ""
            answer += f" - {r[4]}"
            answer += f" <i>({r[5]})</i>\n"
            if r[2]:
                sum+=r[4]
            else:
                sum-=r[4]
        answer+=f"‚¨ÜÔ∏è <b>–°—É–º–∞</b> –∑–∞ –ø–µ—Ä—ñ–æ–¥ <u>{str(sum)}</u>"
        await message.reply(answer)
    else:
        await message.reply("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

@dp.message_handler(state='*', commands = "start")
async def start(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(TestStates.all()[0])  
    if(not BotDB.user_exists(message.from_user.id)):
        BotDB.add_user(message.from_user.id)
    await message.reply(MESSAGES['help'],reply=False)
    await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)

@dp.message_handler(state='*',commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply(MESSAGES['help'])

@dp.message_handler(state='*', commands=['setstate'])
async def process_setstate_command(message: types.Message):
    argument = message.get_args()
    state = dp.current_state(user=message.from_user.id)
    if not argument:
        await state.set_state(TestStates.all()[0])
        return await message.reply(MESSAGES['state_reset'])

    if (not argument.isdigit()) or (not int(argument) < len(TestStates.all())):
        return await message.reply(MESSAGES['invalid_key'].format(key=argument))

    await state.set_state(TestStates.all()[int(argument)])
    await message.reply(MESSAGES['state_change'], reply=False)

@dp.message_handler(state=TestStates.TEST_STATE_0, commands = ("spent", "earned", "s", "e"), commands_prefix = "/!")
async def start(message: types.Message):
    cmd_variants = (('/spent', '/s', '!spent', '!s'), ('/earned', '/e', '!earned', '!e'))
    operation = '-' if message.text.startswith(cmd_variants[0]) else '+'
    state = dp.current_state(user=message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    item1 = types.KeyboardButton("–≤—ñ–¥–º—ñ–Ω–∞")
    item2 = types.KeyboardButton("üè†–¥—ñ–º")
    item3 = types.KeyboardButton("üí≤–ø–æ–∫—É–ø–∫–∏")
    item4 = types.KeyboardButton("üçó–ø—Ä–æ–¥—É–∫—Ç–∏")  
    item5 = types.KeyboardButton("üòú—Ä–æ–∑–≤–∞–≥–∏") 
    item6 = types.KeyboardButton("‚úàÔ∏è—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    value = message.text
    for i in cmd_variants:
        for j in i:
            value = value.replace(j, '').strip()

    if(len(value)):   
        if value[0]=='-':
            operation='-'
        elif value[0]=='+':
            operation='+'
        x = re.findall(r"\d+(?:.\d+)?", value)
        if(len(x)):
            value = float(x[0].replace(',', '.'))
            if(operation == '-'):
                markup.add(item2,item3).add(item4,item5).add(item6,item1)          
                BotDB.add_record(message.from_user.id, operation, value)
                await state.set_state(TestStates.all()[4])
                await message.reply("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∏—Ç—Ä–∞—Ç",reply=False,reply_markup=markup)
            else:
                markup.add(item1)
                await message.reply("‚úÖ –ó–∞–ø–∏—Å –ø—Ä–æ <u><b>–ø—Ä–∏–±—É—Ç–æ–∫</b></u> —É—Å–ø—ñ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∏–π!")
                await state.set_state(TestStates.all()[0])
                await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
        else:
            await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—è–≤–∏—Ç–∏ —Å—É–º—É!")
    else:    
        markup.add(item1)
        await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É!",reply=False, reply_markup=markup)
        if operation=='-':
            await state.set_state(TestStates.all()[2])
        elif operation=='+':
            await state.set_state(TestStates.all()[1])

@dp.message_handler(state=TestStates.TEST_STATE_0,commands = ("history", "h"), commands_prefix = "/!")
async def start(message: types.Message):
    cmd_variants = ('/history', '/h', '!history', '!h')

    cmd = message.text
    for r in cmd_variants:
        cmd = cmd.replace(r, '').strip()

    within = "day"
    if(len(cmd)):
        for k in within_als:
            for als in within_als[k]:
                if(als == cmd):
                    within = k

    await history(message,within)

@dp.message_handler(state=TestStates.TEST_STATE_0, content_types=['text'])
async def start(message: types.Message): 
    state = dp.current_state(user=message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    item1 = types.KeyboardButton("–≤—ñ–¥–º—ñ–Ω–∞")
    item2 = types.KeyboardButton("–¥–µ–Ω—å")
    item3 = types.KeyboardButton("–Ω–µ–¥—ñ–ª—è")
    item4 = types.KeyboardButton("–º—ñ—Å—è—Ü—å")  
    item5 = types.KeyboardButton("—Ä—ñ–∫") 
    item6 = types.KeyboardButton("–∑–∞ –≤–µ—Å—å —á–∞—Å")
    item7 = types.KeyboardButton("–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")   
    if message.text=="‚ûï–ü—Ä–∏–±—É—Ç–æ–∫":
        await state.set_state(TestStates.all()[1])
        markup.add(item1)
        await message.reply("–í–≤–µ–¥—ñ—Ç—å —É!",reply=False, reply_markup=markup)
    elif message.text=="‚ûñ–í–∏—Ç—Ä–∞—Ç–∏":
        await state.set_state(TestStates.all()[2])
        markup.add(item1)
        await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É!",reply=False, reply_markup=markup)
    elif message.text=="üïò–Ü—Å—Ç–æ—Ä—ñ—è":
        if(BotDB.records_exists(message.from_user.id)):
            await state.set_state(TestStates.all()[3])
            markup.add(item2,item3).add(item4,item5).add(item6).add(item1)
            await message.reply("–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥",reply=False, reply_markup=markup)
        else:
            await message.reply("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            await state.set_state(TestStates.all()[0])
            await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)  
    elif message.text=="‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å‚ùå":
        if(BotDB.records_exists(message.from_user.id)):
            await state.set_state(TestStates.all()[5])
            markup.add(item7,item1)
            await message.reply("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é?",reply=False, reply_markup=markup)
        else:
            await message.reply("–ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            await state.set_state(TestStates.all()[0])
            await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
    else:
        await message.reply("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞",reply=False)

@dp.message_handler(state=TestStates.TEST_STATE_1 | TestStates.TEST_STATE_2, content_types=['text'])
async def start(message: types.Message): 
    state = dp.current_state(user=message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    item1 = types.KeyboardButton("–≤—ñ–¥–º—ñ–Ω–∞")
    item2 = types.KeyboardButton("üè†–¥—ñ–º")
    item3 = types.KeyboardButton("üí≤–ø–æ–∫—É–ø–∫–∏")
    item4 = types.KeyboardButton("üçó–ø—Ä–æ–¥—É–∫—Ç–∏")  
    item5 = types.KeyboardButton("üòú—Ä–æ–∑–≤–∞–≥–∏") 
    item6 = types.KeyboardButton("‚úàÔ∏è—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç") 
    markup.add(item2,item3).add(item4,item5).add(item6,item1)
    if message.text=='–≤—ñ–¥–º—ñ–Ω–∞':        
        await state.set_state(TestStates.all()[0])
        await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
    else:
        operation= '-' if message.text[0]=='-' else '+'
        if ((message.text[0]!= '-')==(message.text[0]!= '+')):
            operation= '-' if await state.get_state()=='test_state_2' else '+'
        value = message.text
        if(len(value)):
            x = re.findall(r"\d+(?:.\d+)?", value)
            if(len(x)):
                value = float(x[0].replace(',', '.'))
                if(operation == '-'):
                    BotDB.add_record(message.from_user.id, operation, value)
                    await state.set_state(TestStates.all()[4])
                    await message.reply("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∏—Ç—Ä–∞—Ç",reply=False,reply_markup=markup)
                else:
                    BotDB.add_record(message.from_user.id, operation, value)
                    await message.reply("‚úÖ –ó–∞–ø–∏—Å –ø—Ä–æ <u><b>–ø—Ä–∏–±—É—Ç–æ–∫</b></u> —É—Å–ø—ñ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∏–π!")
                    await state.set_state(TestStates.all()[0])
                    await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
            else:
                await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—è–≤–∏—Ç–∏ —Å—É–º—É!")
        else:
            await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É!",reply=False)

@dp.message_handler(state=TestStates.TEST_STATE_3, content_types=['text'])
async def start(message: types.Message): 
    state = dp.current_state(user=message.from_user.id)
    if message.text=="–¥–µ–Ω—å":
        await state.set_state(TestStates.all()[0])
        await history(message,"day")      
        await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
    elif message.text=="–Ω–µ–¥—ñ–ª—è":
        await state.set_state(TestStates.all()[0])
        await history(message,"week")
        await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
    elif message.text=="–º—ñ—Å—è—Ü—å":
        await state.set_state(TestStates.all()[0])
        await history(message,"month")
        await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
    elif message.text=="—Ä—ñ–∫":
        await state.set_state(TestStates.all()[0])
        await history(message,"year")
        await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
    elif message.text=="–∑–∞ –≤–µ—Å—å —á–∞—Å":
        await state.set_state(TestStates.all()[0])
        await history(message,"all")
        await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
    elif message.text=="–≤—ñ–¥–º—ñ–Ω–∞":
        await state.set_state(TestStates.all()[0])
        await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
    else:
        await message.reply("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –∫–æ–º–∞–Ω–¥–∞",reply=False)

@dp.message_handler(state=TestStates.TEST_STATE_4, content_types=['text'])
async def start(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    try:
        if message.text=="–≤—ñ–¥–º—ñ–Ω–∞":
            BotDB.remove_record(message.from_user.id)
            await state.set_state(TestStates.all()[0])
            await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
        else: 
            index=record_types.index(message.text)
            BotDB.change_record_type(message.from_user.id, index)
            await state.set_state(TestStates.all()[0])       
            await message.reply("‚úÖ –ó–∞–ø–∏—Å –ø—Ä–æ <u><b>–≤–∏—Ç—Ä–∞—Ç–∏</b></u> –Ω–∞ '"+record_types[index]+"' —É—Å–ø—ñ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∏–π!")    
            await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
    except ValueError:
        await message.reply("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞",reply=False)

@dp.message_handler(state=TestStates.TEST_STATE_5, content_types=['text'])
async def start(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    if message.text=="–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
        BotDB.remove_record(message.from_user.id)
        await state.set_state(TestStates.all()[0])
        await message.reply("–ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ")
        await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
    elif message.text=="–≤—ñ–¥–º—ñ–Ω–∞":
        await state.set_state(TestStates.all()[0])
        await message.reply(MESSAGES['start'],reply=False,reply_markup=StartKeybord)
    else:
        await message.reply("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞",reply=False)